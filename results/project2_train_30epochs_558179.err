Loading intel-mpi/2021.5.1
  Loading requirement: intel/2021.5.0
/ddnB/work/berend/Project-2/DataHandling/DataLoader/dataloader.py:11: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  self.data = torch.load('./data/big-padded-tokenized-data.pth')
/ddnB/work/berend/Project-2/DataHandling/Utils/onehot_utils.py:20: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  token_tensor = torch.tensor(tokens, dtype=torch.long)
Traceback (most recent call last):
  File "/ddnB/work/berend/Project-2/train_lstm.py", line 18, in <module>
    trainer(epochs=30, batch_size=128)
  File "/ddnB/work/berend/Project-2/Models/trainer.py", line 114, in __call__
    training_losses += self._train()
  File "/ddnB/work/berend/Project-2/Models/trainer.py", line 75, in _train
    return self._for_loop_part(is_training=True, verbose=True)
  File "/ddnB/work/berend/Project-2/Models/trainer.py", line 67, in _for_loop_part
    loss.backward()
  File "/home/berend/.conda/envs/berend-grandt-csc-4700-ghawaly-project-2/lib/python3.10/site-packages/torch/_tensor.py", line 581, in backward
    torch.autograd.backward(
  File "/home/berend/.conda/envs/berend-grandt-csc-4700-ghawaly-project-2/lib/python3.10/site-packages/torch/autograd/__init__.py", line 347, in backward
    _engine_run_backward(
  File "/home/berend/.conda/envs/berend-grandt-csc-4700-ghawaly-project-2/lib/python3.10/site-packages/torch/autograd/graph.py", line 825, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 13.19 GiB. GPU 0 has a total capacity of 31.74 GiB of which 5.52 GiB is free. Including non-PyTorch memory, this process has 26.21 GiB memory in use. Of the allocated memory 18.45 GiB is allocated by PyTorch, and 7.38 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
